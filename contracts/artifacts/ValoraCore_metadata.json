{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldBridge",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newBridge",
						"type": "address"
					}
				],
				"name": "BridgeUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "oldOracle",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOracle",
						"type": "address"
					}
				],
				"name": "OracleUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalShares",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "totalAssets",
						"type": "uint256"
					}
				],
				"name": "Rebased",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Staked",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "bytes3",
						"name": "destination",
						"type": "bytes3"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "validatorAddress",
						"type": "bytes"
					}
				],
				"name": "TokensBridgedToValidator",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes3",
						"name": "chainId",
						"type": "bytes3"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "validatorAddress",
						"type": "bytes"
					}
				],
				"name": "ValidatorAddressUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "WithdrawCompleted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "unlockTime",
						"type": "uint256"
					}
				],
				"name": "WithdrawRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "oldDelay",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "newDelay",
						"type": "uint256"
					}
				],
				"name": "WithdrawalDelayUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "WithdrawalsEnabled",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MIN_DEPOSIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "bridge",
				"outputs": [
					{
						"internalType": "contract IBridge",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "cellToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "completeWithdrawal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "enableWithdrawals",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "exchangeRate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAdminConfig",
				"outputs": [
					{
						"internalType": "address",
						"name": "oracul_",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "paused_",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "withdrawalDelay_",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getBridgeConfig",
				"outputs": [
					{
						"internalType": "address",
						"name": "bridge_",
						"type": "address"
					},
					{
						"internalType": "bytes3",
						"name": "nativeChainId_",
						"type": "bytes3"
					},
					{
						"internalType": "bytes",
						"name": "validatorAddress_",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getTotalAssets",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getWithdrawalRequest",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "shares",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "unlockTime",
								"type": "uint256"
							}
						],
						"internalType": "struct ValoraCore.WithdrawalRequest",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_cellToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_sCellToken",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_oracul",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_bridge",
						"type": "address"
					},
					{
						"internalType": "bytes3",
						"name": "_nativeChainId",
						"type": "bytes3"
					},
					{
						"internalType": "bytes",
						"name": "_validatorAddress",
						"type": "bytes"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isBridgeConfigured",
				"outputs": [
					{
						"internalType": "bool",
						"name": "configured",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isOperational",
				"outputs": [
					{
						"internalType": "bool",
						"name": "operational",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nativeChainId",
				"outputs": [
					{
						"internalType": "bytes3",
						"name": "",
						"type": "bytes3"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "oracul",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "rebase",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					}
				],
				"name": "requestWithdrawal",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "sCellToken",
				"outputs": [
					{
						"internalType": "contract sCELL",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_bridge",
						"type": "address"
					}
				],
				"name": "setBridge",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_oracul",
						"type": "address"
					}
				],
				"name": "setOracul",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes3",
						"name": "_chainId",
						"type": "bytes3"
					},
					{
						"internalType": "bytes",
						"name": "_validatorAddress",
						"type": "bytes"
					}
				],
				"name": "setValidatorAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_delay",
						"type": "uint256"
					}
				],
				"name": "setWithdrawalDelay",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "validatorAddress",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawalDelay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "withdrawalRequests",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "unlockTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawalsEnabled",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				}
			},
			"kind": "dev",
			"methods": {
				"enableWithdrawals()": {
					"details": "Once enabled, withdrawals cannot be disabled again"
				},
				"getAdminConfig()": {
					"returns": {
						"oracul_": "Oracle address",
						"paused_": "Whether contract is paused",
						"withdrawalDelay_": "Current withdrawal delay"
					}
				},
				"getBridgeConfig()": {
					"returns": {
						"bridge_": "Bridge contract address",
						"nativeChainId_": "Native chain ID",
						"validatorAddress_": "Validator address"
					}
				},
				"isBridgeConfigured()": {
					"returns": {
						"configured": "True if all bridge settings are set"
					}
				},
				"isOperational()": {
					"returns": {
						"operational": "True if contract is not paused"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setBridge(address)": {
					"params": {
						"_bridge": "New bridge address"
					}
				},
				"setOracul(address)": {
					"params": {
						"_oracul": "New oracle address"
					}
				},
				"setValidatorAddress(bytes3,bytes)": {
					"params": {
						"_chainId": "Target chain ID",
						"_validatorAddress": "Validator address in target chain"
					}
				},
				"setWithdrawalDelay(uint256)": {
					"params": {
						"_delay": "New delay in seconds (max 30 days)"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"enableWithdrawals()": {
					"notice": "Enable withdrawals forever (can only be called once)"
				},
				"getAdminConfig()": {
					"notice": "Get admin configuration"
				},
				"getBridgeConfig()": {
					"notice": "Get bridge configuration"
				},
				"isBridgeConfigured()": {
					"notice": "Check if bridge is properly configured"
				},
				"isOperational()": {
					"notice": "Check if contract is operational (not paused)"
				},
				"pause()": {
					"notice": "Pause contract operations"
				},
				"setBridge(address)": {
					"notice": "Set bridge contract address"
				},
				"setOracul(address)": {
					"notice": "Set oracle address"
				},
				"setValidatorAddress(bytes3,bytes)": {
					"notice": "Set validator address and chain ID"
				},
				"setWithdrawalDelay(uint256)": {
					"notice": "Set withdrawal delay period"
				},
				"unpause()": {
					"notice": "Unpause contract operations"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/ValoraCore.sol": "ValoraCore"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
				"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
				"dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
			]
		},
		"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
			"keccak256": "0x2025ccf05f6f1f2fd4e078e552836f525a1864e3854ed555047cd732320ab29b",
			"license": "MIT",
			"urls": [
				"bzz-raw://d27f4b23c2dee42394aebaf42bf238285230f472dfd3282a39c3f000ec28214f",
				"dweb:/ipfs/QmQa3DnvccwdWJeWrjgXPnFMTWbzWQWR39hVqC7eEwo2PC"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
				"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a",
			"license": "MIT",
			"urls": [
				"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a",
				"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"contracts/AdminManager.sol": {
			"keccak256": "0xf2b639f8b4c338656709db015dbdf4dce042755f6bd4e4d6864fd7d5b544ed97",
			"license": "MIT",
			"urls": [
				"bzz-raw://2ebe1543b186f8ce17beb41f543f6a09c0cd102eabedf18c8f4d07322d835488",
				"dweb:/ipfs/QmPg7rhNnHKJC3boeZdVVXHfp8rEy67F4FqLw2jAfxDWY5"
			]
		},
		"contracts/BridgeManager.sol": {
			"keccak256": "0x0dedd6fa4120a9cdc6eba1cea966c774cdf974ef3bbcc312ff18305a18d07f26",
			"license": "MIT",
			"urls": [
				"bzz-raw://2feac8848ff5fe8572793fad9919b779ce82933675408214f356de93a2201be7",
				"dweb:/ipfs/QmTtubYSjAT2BtHjKQFHCHgHtazsaxAtm9HrhiHrYDZq5s"
			]
		},
		"contracts/ValoraCore.sol": {
			"keccak256": "0x2e073645533fccd846d8390908477c0e8284c5cb1343a6a8358fb733880ab27b",
			"license": "MIT",
			"urls": [
				"bzz-raw://23d9ac1c74b6dc68722e755d8bfbd72db19bb49cf18371ded9895a263472afd9",
				"dweb:/ipfs/QmZfY93pwCdwMxaW4v2KR9LF25cnx7wiqdoFbAiDo794g5"
			]
		},
		"contracts/sCELL.sol": {
			"keccak256": "0x361c3973515fed24b2e071c8adf68bf33f2e6ffba951fd7b71dd64673eceea44",
			"license": "MIT",
			"urls": [
				"bzz-raw://cfabbaf15ea5265bd5155e4b663e687b0daabfe23fbc9497ee6b3efffb8d5b43",
				"dweb:/ipfs/QmTm3XJdhquMxcCDx1AJDrXKMZatGcLhMKMznY5Qc9eHVU"
			]
		}
	},
	"version": 1
}